{"version":3,"sources":["components/Input/index.js","theme.js","components/Spinner/index.js","components/Message/index.js","components/SignupForm/validation.js","components/SignupForm/index.js","components/SignupForm/const.js","components/App/index.js","serviceWorker.js","index.js"],"names":["field","props","theme","breakpoints","sx","position","top","left","transform","size","color","colors","primary","message","text","type","py","data-testid","values","errors","email","test","password","passwordConfirm","name","weightRestraintError","weight","idealWeight","useState","setMessage","handleSubmit","actions","a","axios","post","headers","status","get","errorMessage","setFieldError","setSubmitting","flexWrap","width","p","src","initialValues","onSubmit","validate","isSubmitting","Spinner","opacity","htmlFor","component","Input","aria-required","Text","textAlign","variant","Message","maxWidth","mx","px","SignupForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2afd0ae8.chunk.js","sourcesContent":["import React from 'react'\nimport { Input } from '@rebass/forms'\n\nexport default ({ field, ...props }) => {\n  return <Input {...field} {...props} />\n}\n","import theme from '@rebass/preset'\n\nexport default {\n  ...theme,\n  breakpoints: ['768px'],\n}\n","import React from 'react'\nimport Loader from 'react-spinners/ClipLoader'\nimport { Box } from 'reflexbox'\nimport theme from '../../theme'\n\nexport default () => (\n  <Box\n    sx={{\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n    }}\n  >\n    <Loader size={100} color={theme.colors.primary} />\n  </Box>\n)\n","import React from 'react'\nimport { Box } from 'reflexbox'\n\nexport default ({ message = {} }) => {\n  const { text = '', type = 'info' } = message\n  let color\n  switch (type) {\n    case 'success':\n      color = 'green'\n      break\n    case 'error':\n      color = 'red'\n      break\n    case 'info':\n      color = 'black'\n      break\n    default:\n      color = 'black'\n  }\n\n  return (\n    <Box py={3} color={color} data-testid=\"message\">\n      {text}\n    </Box>\n  )\n}\n","const MIN_WEIGHT = 3\nconst MAX_WEIGHT = 180\n\nexport default (values) => {\n  const errors = {}\n\n  if (!values.email) {\n    errors.email = 'Required'\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address'\n  }\n\n  if (!values.password) {\n    errors.password = 'Required'\n  } else if (\n    !/^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/.test(\n      values.password,\n    )\n  ) {\n    errors.password =\n      'Invalid password. Password must be at least 8 characters, contain 1 letter, 1 number and 1 special character'\n  }\n\n  if (!values.passwordConfirm) {\n    errors.passwordConfirm = 'Required'\n  } else if (values.password !== values.passwordConfirm) {\n    errors.passwordConfirm = 'Passwords do not match'\n  }\n\n  if (!values.name) {\n    errors.name = 'Required'\n  }\n\n  const weightRestraintError = `Weight must be between ${MIN_WEIGHT}-${MAX_WEIGHT}lbs`\n  if (!values.weight) {\n    errors.weight = 'Required'\n  } else if (values.weight < MIN_WEIGHT || values.weight > MAX_WEIGHT) {\n    errors.weight = weightRestraintError\n  }\n\n  if (\n    values.idealWeight &&\n    (values.idealWeight < MIN_WEIGHT || values.idealWeight > MAX_WEIGHT)\n  ) {\n    errors.idealWeight = weightRestraintError\n  }\n\n  return errors\n}\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport get from 'lodash/get'\nimport { Button, Image, Text } from 'rebass'\nimport { Flex, Box } from 'reflexbox'\nimport { Label } from '@rebass/forms'\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\nimport Input from '../Input'\nimport Spinner from '../Spinner'\nimport Message from '../Message'\nimport validate from './validation'\nimport { SERVER_URL } from './const'\n\nexport default () => {\n  const [message, setMessage] = useState({\n    text: '',\n    color: 'black',\n  })\n\n  const handleSubmit = async (values, actions) => {\n    setMessage({\n      text: '',\n      type: 'info',\n    })\n    try {\n      const response = await axios.post(SERVER_URL, values, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n\n      if (response.status === 200) {\n        setMessage({\n          text: 'Form submitted successfully!',\n          type: 'success',\n        })\n      }\n    } catch (e) {\n      const status = get(e, 'response.status')\n      if (status === 500) {\n        setMessage({\n          text:\n            'There has been an error processing your request. Please try again.',\n          type: 'error',\n        })\n      } else if (status === 400) {\n        const errorMessage = get(e, 'response.data.message', '')\n        actions.setFieldError('email', errorMessage)\n      }\n    }\n    actions.setSubmitting(false)\n  }\n\n  return (\n    <Flex flexWrap=\"wrap\">\n      <Box width={[1, 1 / 2]} p={3}>\n        <Image src={'https://via.placeholder.com/600'} />\n      </Box>\n      <Box width={[1, 1 / 2]} p={3}>\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n            passwordConfirm: '',\n            name: '',\n            weight: 50,\n            idealWeight: 50,\n          }}\n          onSubmit={handleSubmit}\n          validate={validate}\n        >\n          {({ isSubmitting }) => (\n            <Box sx={{ position: 'relative' }}>\n              {isSubmitting && <Spinner />}\n              <Box\n                sx={{\n                  opacity: isSubmitting ? 0.3 : 1,\n                }}\n              >\n                <Form>\n                  <Box py={2}>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Field\n                      type=\"email\"\n                      name=\"email\"\n                      component={Input}\n                      aria-required=\"true\"\n                    />\n                    <ErrorMessage name=\"email\" color=\"red\" component={Text} />\n                  </Box>\n                  <Box py={2}>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Field\n                      name=\"password\"\n                      type=\"password\"\n                      component={Input}\n                      aria-required=\"true\"\n                    />\n                    <ErrorMessage\n                      name=\"password\"\n                      color=\"red\"\n                      component={Text}\n                    />\n                  </Box>\n                  <Box py={2}>\n                    <Label htmlFor=\"passwordConfirm\">Confirm Password</Label>\n                    <Field\n                      name=\"passwordConfirm\"\n                      type=\"password\"\n                      component={Input}\n                      aria-required=\"true\"\n                    />\n                    <ErrorMessage\n                      name=\"passwordConfirm\"\n                      color=\"red\"\n                      component={Text}\n                    />\n                  </Box>\n                  <Box py={2}>\n                    <Label htmlFor=\"name\">Name</Label>\n                    <Field name=\"name\" component={Input} aria-required=\"true\" />\n                    <ErrorMessage name=\"name\" color=\"red\" component={Text} />\n                  </Box>\n                  <Box py={2}>\n                    <Label htmlFor=\"weight\">Weight</Label>\n                    <Field\n                      name=\"weight\"\n                      type=\"number\"\n                      component={Input}\n                      aria-required=\"true\"\n                    />\n                    <ErrorMessage name=\"weight\" color=\"red\" component={Text} />\n                  </Box>\n                  <Box py={2}>\n                    <Label htmlFor=\"idealWeight\">Ideal Weight</Label>\n                    <Field name=\"idealWeight\" type=\"number\" component={Input} />\n                    <ErrorMessage\n                      name=\"idealWeight\"\n                      color=\"red\"\n                      component={Text}\n                    />\n                  </Box>\n                  <Box sx={{ textAlign: 'center' }} py={2}>\n                    <Button variant=\"primary\" type=\"submit\">\n                      Submit\n                    </Button>\n                  </Box>\n                </Form>\n              </Box>\n            </Box>\n          )}\n        </Formik>\n        <Message message={message} />\n      </Box>\n    </Flex>\n  )\n}\n","export const SERVER_URL =\n  'https://32f2jzoot4.execute-api.us-east-1.amazonaws.com/default/fe-takehome-api'\n","import React from 'react'\nimport SignupForm from '../SignupForm'\nimport { Box } from 'rebass'\n\nexport default (props) => (\n  <Box\n    sx={{\n      maxWidth: 1200,\n      mx: 'auto',\n      px: 3,\n    }}\n  >\n    <SignupForm />\n  </Box>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport { ThemeProvider } from 'emotion-theming'\nimport theme from './theme'\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    ,\n  </ThemeProvider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}